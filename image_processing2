#!/usr/bin/env python3

"""
6.101 Lab 2:
Image Processing 2
"""

# NO ADDITIONAL IMPORTS!
# (except in the last part of the lab; see the lab writeup for details)
import math
from PIL import Image

def get_pixel(image, row, col):
    return image["pixels"][row*(image['width']) + col]


def set_pixel(image, row, col, color):
    image["pixels"][row*(image['width']) + col] = color

def pixel_exists(image, row, col):
    if (row < 0 or row >= image['height']) or (col < 0 or col >= image['width']):
        return False
    return True

# VARIOUS FILTERS
def apply_per_pixel(image, func):
    result = {
        "height": image["height"],
        "width": image["width"],
        "pixels": [0]*len(image['pixels']),
    }
    for row in range(image["height"]):
        for col in range(image["width"]):
            color = get_pixel(image, row, col)
            new_color = func(color)
            set_pixel(result, row, col, new_color)
    return result

def inverted(image):
    return apply_per_pixel(image, lambda color: 255-color)

def correlate(image, kernel, boundary_behavior):
    image_copy = {
        "height": image["height"],
        "width": image["width"],
        "pixels": image['pixels'].copy()
    }

    if boundary_behavior != 'zero' and boundary_behavior != 'extend' and boundary_behavior != 'wrap':
        return None 
    
    kernel_size = len(kernel)**(1/2) # kernel is a 1D list representation of an n x n matrix 

    for row in range(image['height']) : #This double loop modifies the interior image_copy['pixels']
        for col in range(image['width']) : #(row,col) -> apply kernel 

            pixel_color = 0 #accumulator variable 

            #(row-(kernel_size-1)/2, col-(kernel_size-1)/2)         (row-(kernel_size-1)/2, col+(kernel_size-1)/2)
            #(row+(kernel_size-1)/2, col-(kernel_size-1)/2)         (row+(kernel_size-1)/2, col+(kernel_size-1)/2)

            kernel_index = 0
            for i in range(int(row-(kernel_size-1)/2), int(row+(kernel_size-1)/2+1)):
                for j in range(int(col-(kernel_size-1)/2), int(col+(kernel_size-1)/2+1)): #current cord (i,j)

                    if(pixel_exists(image, i,j)):
                        try:
                            pixel_color+=kernel[kernel_index] * get_pixel(image, i, j)
                        except:
                            print('height', image['height'])
                            print('width', image['width'])
                            print('i', i)
                            print('j', j)
                            print('dimensions', image['width']*image['height'])
                            print('length', len(image['pixels']))
                            raise Exception
                    else:
                        if boundary_behavior == 'zero': 
                            pixel_color+=0

                        elif boundary_behavior == 'wrap':
                            #calculate the pixel box we want to get
                            target_row = i%image['height']
                            target_col = j%image['width']
                        
                            pixel_color += kernel[kernel_index] * get_pixel(image, target_row, target_col)

                        elif boundary_behavior == 'extend': 
                            corrected_row = i
                            corrected_col = j
                            if(i < 0):
                                corrected_row = 0
                            elif(i >= image['height']):
                                corrected_row = image['height']-1
                            if(j< 0):
                                corrected_col = 0
                            elif(j >= image['width']):
                                corrected_col = image['width']-1
                            pixel_color += kernel[kernel_index] * get_pixel(image, corrected_row, corrected_col)
                    # print("i", i)
                    # print("j", j)
                    kernel_index+=1
            set_pixel(image_copy, row, col, pixel_color)
        
    return image_copy

def edges(image):
    """
    Return a new image with all edges detected and highlighted. This is done 
    using two correlations involving two different kernels k1 and k2.

    k1 = [-1, -2, -1, 0,  0,  0, 1,  2, 1]
    k2 = [-1, 0, 1, -2, 0, 2, -1, 0, 1]

    The filter is computed by correlating the input with k1 and k2 creating images
    O1 and O2. The value of each pixel in O1 and O2 is squared, sumed, square rooted,
    rounded, and set to the corresponding pixel in the resulting image. 


    This process should not mutate the input image; rather, it should create a separate 
    structure to represent the output. 
    """

    output_image = {
        'height': image['height'],
        'width': image['width'],
        'pixels': [0]*len(image['pixels'])
    }
    k1 = [-1, -2, -1, 0,  0,  0, 1,  2, 1]
    k2 = [-1, 0, 1, -2, 0, 2, -1, 0, 1]

    o1 = correlate(image, k1, 'extend')
    o2 = correlate(image, k2, 'extend')

    for row in range(image['height']):
        for col in range(image['width']):
            o1_pixel_val = get_pixel(o1, row, col)
            o2_pixel_val = get_pixel(o2, row, col)

            set_pixel(output_image, row, col, round((o1_pixel_val**2 + o2_pixel_val**2)**(1/2)))
    
    round_and_clip_image(output_image)
    
    return output_image


def round_and_clip_image(image):
    """
    Given a dictionary, ensure that the values in the "pixels" list are all
    integers in the range [0, 255].

    All values should be converted to integers using Python's `round` function.

    Any locations with values higher than 255 in the input should have value
    255 in the output; and any locations with values lower than 0 in the input
    should have value 0 in the output.
    """
    for index, pixel_val in enumerate(image['pixels']):
        image['pixels'][index] = round(pixel_val)

        if pixel_val > 255: 
            image['pixels'][index] = 255
        if pixel_val < 0:
            image['pixels'][index] = 0

def grayscale_red_green_blue_channel(image): 
    """
    Given an RGB image, return a separate greyscale representations of the
    red, green, and blue channels of the image. The three dictionaries are 
    stored and returned in a tuple. 

    Example of RGB image representation 
    i = {
    "height": 3,
    "width": 2,
    "pixels": [(255, 0, 0), (39, 143, 230),
               (255, 191, 0), (0, 200, 0),
               (100, 100, 100), (179, 0, 199)],
    }

    -> 

    i_red = {
    "height": 3,
    "width": 2,
    "pixels": [255, 39, 255, 0, 100, 179]
    }
    """
    image_red = {
        'height': image['height'],
        'width': image['width'],
        'pixels': []
    }

    image_green = {
        'height': image['height'],
        'width': image['width'],
        'pixels': []
    }

    image_blue = {
        'height': image['height'],
        'width': image['width'],
        'pixels': []
    }

    for pixel in image['pixels']:
        image_red['pixels'].append(pixel[0])
        image_green['pixels'].append(pixel[1])
        image_blue['pixels'].append(pixel[2])
    
    return (image_red, image_green, image_blue)


def combine_r_g_b(image_red, image_green, image_blue):
    image_rgb = {
        'height': image_red['height'],
        'width': image_red['width'],
        'pixels': []
    }
    for i in range(len(image_red['pixels'])):
        image_rgb['pixels'].append((image_red['pixels'][i], image_green['pixels'][i], image_blue['pixels'][i]))
    return image_rgb

def color_filter_from_greyscale_filter(filter):
    """
    Given a filter that takes a greyscale image as input and produces a
    greyscale image as output, returns a function that takes a color image as
    input and produces the filtered color image.
    """
    def filter_color_version(image):
        grayscale_channels = grayscale_red_green_blue_channel(image)
    
        #apply grayscale filters to each channel
        red_filtered = filter(grayscale_channels[0])
        green_filtered = filter(grayscale_channels[1])
        blue_filtered = filter(grayscale_channels[2])

        #return combined grayscale images 
        return combine_r_g_b(red_filtered, green_filtered, blue_filtered)

    return filter_color_version 

def make_blur_filter(kernel_size):
    def blur_filter(image): #given a grayscale image 
        blur_kernel = [1/(kernel_size**2)] * (kernel_size**2)
        blurred_img = correlate(image, blur_kernel, 'extend')
        round_and_clip_image(blurred_img)
        return blurred_img
    return blur_filter


def make_sharpen_filter(kernel_size):
    def sharpen(image): #given a grayscale image
        image_copy = {
            'height': image['height'],
            'width': image['width'],
            'pixels': image['pixels'][:]
        }
        
        blurred_filter = make_blur_filter(kernel_size) #call blurred because we are blurring a grayscale image with a grayscale filter
        blurred_img = blurred_filter(image)
        for row in range(image['height']):
            for col in range(image['width']):
                new_pixel_color = (2*get_pixel(image, row, col)) - get_pixel(blurred_img, row, col)
                set_pixel(image_copy, row, col, new_pixel_color)
        round_and_clip_image(image_copy)
        return image_copy
    return sharpen



def filter_cascade(filters):
    """
    Given a list of filters (implemented as functions on images), returns a new
    single filter such that applying that filter to an image produces the same
    output as applying each of the individual ones in turn.
    """
    def equivalent_filter(image):
        curr_image = image
        for filter in filters:
            curr_image = filter(curr_image)
        return curr_image
    return equivalent_filter


# SEAM CARVING

# Main Seam Carving Implementation


def seam_carving(image, ncols):
    """
    Starting from the given image, use the seam carving technique to remove
    ncols (an integer) columns from the image. Returns a new image.
    """
    curr_image = image 
    for _ in range(ncols):
        img_grey = greyscale_image_from_color_image(curr_image)
        energy = edges(img_grey)
        cem = cumulative_energy_map(energy)
        min_seam = minimum_energy_seam(cem)
        curr_image = image_without_seam(curr_image, min_seam)
        print(curr_image['height'], curr_image['width'])
    return curr_image


# Optional Helper Functions for Seam Carving


def greyscale_image_from_color_image(image):
    """
    Given a color image, computes and returns a corresponding greyscale image.

    Returns a greyscale image (represented as a dictionary).
    """
    image_greyscale = {
        'height': image['height'],
        'width': image['width'],
        'pixels': [0]*len(image['pixels'])
    }
    for i in range(len(image_greyscale['pixels'])):
        rgb_tuple = image['pixels'][i]
        image_greyscale['pixels'][i] = round(.299*rgb_tuple[0] + .587*rgb_tuple[1] + .114*rgb_tuple[2])
    return image_greyscale

def compute_energy(grey):
    """
    Given a greyscale image, computes a measure of "energy", in our case using
    the edges function from last week.

    Returns a greyscale image (represented as a dictionary).
    """
    
    return edges(grey)


def cumulative_energy_map(energy):
    """
    Given a measure of energy (e.g., the output of the compute_energy
    function), computes a "cumulative energy map" as described in the lab 2
    writeup.

    Returns a dictionary with 'height', 'width', and 'pixels' keys (but where
    the values in the 'pixels' array may not necessarily be in the range [0,
    255].
    """
    cem = {
        'height': energy['height'],
        'width': energy['width'],
        'pixels': energy['pixels']
    }
    #For the top row, cem values already equal the top row from the energy map 

    #for subsequent rows 

    for row in range(1, energy['height']):
        for col in range(energy['width']): 
            #current coordinate in consideration (row, col)
            #possible adjacent pixels in row above -> (row-1, col-1), (row-1, col), (row-1, col+1) 
            #call these pixels p1, p2, p3 
            curr_pixel = get_pixel(cem, row, col)
            p1 = get_pixel(energy, row-1, col-1) if pixel_exists(energy, row-1, col-1) else math.inf
            p2 = get_pixel(energy, row-1, col) 
            p3 = get_pixel(energy, row-1, col+1) if pixel_exists(energy, row-1, col+1) else math.inf
           
            set_pixel(cem, row, col, curr_pixel+min(p1, p2, p3))
    return cem


def minimum_energy_seam(cem):
    """
    Given a cumulative energy map, returns a list of the indices into the
    'pixels' list that correspond to pixels contained in the minimum-energy
    seam (computed as described in the lab 2 writeup).
    """
    #index = row*(image['width']) + col
    min_seam = [] #should store one index of minimum value for each row
    #find seed index locted within [row = height-1 col = 0, row = height - 1 col = cem['width'] - 1 
    #start index for last row is (height-1)*image['width'], 
    # start_index_last_row = (cem['height']-1)*cem['width']
    # end_index_last_row = (cem['height']-1)*cem['width']+cem['width'] - 1
    # smallest = (cem['pixels'][start_index_last_row], start_index_last_row)
    # for i in range(start_index_last_row , end_index_last_row+1):
    #     if cem['pixels'][i] < smallest[0]:
    #         smallest = (cem['pixels'][i], i)
    

    for row in range(cem['height']-1,-1 ,-1):
        min_val_and_index = (math.inf, -1) #(val, index) tuple 
        for col in range(cem['width']):
            if min_val_and_index[1] == -1: #we have not found our seed value and index yet 
                if get_pixel(cem, row, col) < min_val_and_index[0]:
                    min_val_and_index = (get_pixel(cem, row, col), row*(cem['width']) + col)
                    break
        #we have already found seed value and index, we can only check adjacent indices in the row above 
        p1 = get_pixel(cem, row-1, col-1) if pixel_exists(cem, row-1, col-1) else math.inf
        p2 = get_pixel(cem, row-1, col) 
        p3 = get_pixel(cem, row-1, col+1) if pixel_exists(cem, row-1, col+1) else math.inf
        

        min_seam.append(min_val_and_index[1])
    return min_seam

def image_without_seam(image, seam):
    """
    Given a (color) image and a list of indices to be removed from the image,
    return a new image (without modifying the original) that contains all the
    pixels from the original image except those corresponding to the locations
    in the given list.
    """
    img_seam_removed = {
        'height': image['height'],
        'width': image['width'],
        'pixels': image['pixels']
    }
    num_popped = 0
    # print('num_pixels', len(seam))
    # print('num rows', image['height'])
    seam = sorted(seam) #ordering pixels from smallest to greatest, popping a pixel affects all the indices that come AFTER not BEFORE
    for index in seam:
        img_seam_removed['pixels'].pop(index-num_popped)
        num_popped+=1
    img_seam_removed['width']= img_seam_removed['width']-1 
    return img_seam_removed


# HELPER FUNCTIONS FOR LOADING AND SAVING COLOR IMAGES


def load_color_image(filename):
    """
    Loads a color image from the given file and returns a dictionary
    representing that image.

    Invoked as, for example:
       i = load_color_image('test_images/cat.png')
    """
    with open(filename, "rb") as img_handle:
        img = Image.open(img_handle)
        img = img.convert("RGB")  # in case we were given a greyscale image
        img_data = img.getdata()
        pixels = list(img_data)
        width, height = img.size
        return {"height": height, "width": width, "pixels": pixels}


def save_color_image(image, filename, mode="PNG"):
    """
    Saves the given color image to disk or to a file-like object.  If filename
    is given as a string, the file type will be inferred from the given name.
    If filename is given as a file-like object, the file type will be
    determined by the 'mode' parameter.
    """
    out = Image.new(mode="RGB", size=(image["width"], image["height"]))
    out.putdata(image["pixels"])
    if isinstance(filename, str):
        out.save(filename)
    else:
        out.save(filename, mode)
    out.close()


def load_greyscale_image(filename):
    """
    Loads an image from the given file and returns an instance of this class
    representing that image.  This also performs conversion to greyscale.

    Invoked as, for example:
       i = load_greyscale_image('test_images/cat.png')
    """
    with open(filename, "rb") as img_handle:
        img = Image.open(img_handle)
        img_data = img.getdata()
        if img.mode.startswith("RGB"):
            pixels = [
                round(0.299 * p[0] + 0.587 * p[1] + 0.114 * p[2]) for p in img_data
            ]
        elif img.mode == "LA":
            pixels = [p[0] for p in img_data]
        elif img.mode == "L":
            pixels = list(img_data)
        else:
            raise ValueError(f"Unsupported image mode: {img.mode}")
        width, height = img.size
        return {"height": height, "width": width, "pixels": pixels}


def save_greyscale_image(image, filename, mode="PNG"):
    """
    Saves the given image to disk or to a file-like object.  If filename is
    given as a string, the file type will be inferred from the given name.  If
    filename is given as a file-like object, the file type will be determined
    by the 'mode' parameter.
    """
    out = Image.new(mode="L", size=(image["width"], image["height"]))
    out.putdata(image["pixels"])
    if isinstance(filename, str):
        out.save(filename)
    else:
        out.save(filename, mode)
    out.close()


if __name__ == "__main__":
    # code in this block will only be run when you explicitly run your script,
    # and not when the tests are being run.  this is a good place for
    # generating images, etc.
    pass


# cat = load_color_image('test_images/cat.png')
# cat_inverted_filter = color_filter_from_greyscale_filter(inverted)

# cat_inverted_img = cat_inverted_filter(cat)
# save_color_image(cat_inverted_img, 'cat_inverted.png')

# python = load_color_image('test_images/python.png')
# python_blur_color_filter = color_filter_from_greyscale_filter(make_blur_filter(9)) 
# python_blurred_img = python_blur_color_filter(python)
# save_color_image(python_blurred_img,'python_blurred.png')

# sparrowchick = load_color_image('test_images/sparrowchick.png')
# sparrowchick_sharpen_color_filter = color_filter_from_greyscale_filter(make_sharpen_filter(7)) 
# sparrowchick_sharpened_img = sparrowchick_sharpen_color_filter(sparrowchick)
# save_color_image(sparrowchick_sharpened_img, 'sparrowchick_sharpened.png')

# filter1 = color_filter_from_greyscale_filter(edges)
# filter2 = color_filter_from_greyscale_filter(make_blur_filter(5))
# filt = filter_cascade([filter1, filter1, filter2, filter1])

# frog = load_color_image('test_images/frog.png')
# save_color_image(filt(frog), 'frog_cascaded_yeet.png')

twocats = load_color_image('test_images/twocats.png')
save_color_image(seam_carving(twocats, 100), 'twocats_seamless.png')

# pattern = load_color_image('test_images/pattern.png')
# pattern_grey = greyscale_image_from_color_image(pattern)
# save_greyscale_image(pattern_grey, 'pattern_grey.png')
# pattern_energy_map = compute_energy(pattern_grey)
# pattern_cem = cumulative_energy_map(pattern_energy_map)
# min_seam = minimum_energy_seam(pattern_cem)
# pattern_seamless = image_without_seam(pattern, min_seam)
# save_color_image(pattern_seamless, 'pattern_seamless.png')

